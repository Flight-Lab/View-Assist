blueprint:
  name: View Assist Extras - Volume control Assist & Broadcast
  description: 
    __WARNING__

    __This blueprint has now been merged with another and is no longer being developed.__
    
    __Repeat, this blueprint has been superceded by Device Control - Display & Audio__
    
    Decreases music volume when triggered by wake-word or broadcast, raises
    music volume when TTS ends. Must make new automation for each device. Requires
    the use of separate and unique media_players for mediaplayer_device and musicplayer_device
    entities in View Assist device config. (View Assist Extras - Volume control Assist
    & Broadcast v 2.0.0)
  domain: automation
  source_url: https://gist.github.com/Flight-Lab/ed20af4f6f7a4a5258a668317ae61671
  author: Flab
  input:
    wake:
      name: wake
      description: The wake sensor for the above View Assist device (e.g. sensor.viewassist_living_room_wake)
      selector:
        entity:
          filter:
            - domain:
                - sensor
          multiple: false
    stt_sensor:
      name: STT Sensor
      description: The STT sensor for the above View Assist device (e.g. sensor.viewassist_living_room_stt)
      selector:
        entity:
          filter:
            - domain:
                - sensor
          multiple: false
    mediaplayer_device:
      name: mediaplayer_device
      description: The media_player used for TTS playback.
      selector:
        entity:
          filter:
            - domain:
                - media_player
          multiple: false
    musicplayer_device:
      name: musicplayer_device
      description: The media_player used for music playback.
      selector:
        entity:
          filter:
            - domain:
                - media_player
          multiple: false
    broadcast:
      name: Broadcast Automation
      description: The Automation used for broadcast. (example automation.view_assist_broadcast)
      selector:
        entity:
          filter:
            - domain:
                - automation
          multiple: false
      default: automation.view_assist_broadcast
    volume_duck:
      name: Volume Duck %
      description:
        Set how much the music volume ducks during assist. 0 will mute
        the volume, 1 will not decrease the volume at all.
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01
          mode: slider
      default: 0.5
    tts_timeout:
      name: TTS Timeout
      description:
        How long to wait after TTS failure for volume to reset. Setting
        too short may cut off long TTS responses.
      selector:
        duration: {}
      default:
        hours: 0
        minutes: 2
        seconds: 0
        milliseconds: 0
    stt_silence_alert:
      name: STT Silence Alert
      description: Plays sound when no STT detected.
      selector:
        boolean: {}
      default: false
    stt_silence_file:
      name: STT Not Detected Sound
      description: Sound to use for STT Silence Alert
      selector:
        media: {}
      default:
        target:
          entity_id: media_player.ar_pyramid_audio
        data:
          media_content_id: media-source://media_source/local/end.mp3
          media_content_type: audio/mpeg
alias: View Assist Extras - Volume control Assist & Broadcast
description: ""
triggers:
  - alias: wake word
    entity_id: !input wake
    to: end
    from: start
    id: wake
    trigger: state
  - alias: broadcast
    entity_id:
      - !input broadcast
    attribute: current
    id: broadcast
    trigger: state
variables:
  musicplayer_device: !input musicplayer_device
  stt_silence_alert: !input stt_silence_alert
  volume_duck: !input volume_duck
  stt_sensor: !input stt_sensor
conditions: []
actions:
  - choose:
      - conditions:
          - condition: trigger
            id: wake
            enabled: true
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input musicplayer_device
                    state: idle
                  - condition: template
                    value_template: "{{ stt_silence_alert == true }}"
                sequence:
                  - wait_for_trigger:
                      - trigger: template
                        value_template: >-
                          {{ states(stt_sensor) ==
                          'no-text-recognized' }}
                    timeout:
                      hours: 0
                      minutes: 0
                      seconds: 30
                      milliseconds: 0
                  - action: media_player.play_media
                    data: !input stt_silence_file
              - conditions:
                  - condition: state
                    entity_id: !input musicplayer_device
                    state: playing
                    enabled: true
                sequence:
                  - variables:
                      initial_volume: "{{ state_attr(musicplayer_device, 'volume_level') }}"
                  - action: media_player.volume_set
                    data:
                      volume_level: "{{ initial_volume | float * volume_duck }}"
                    target:
                      entity_id: !input musicplayer_device
                  - wait_for_trigger:
                      - trigger: template
                        value_template: >-
                          {{ states(stt_sensor) in
                          ['no-text-recognized', 'end'] }}
                    timeout:
                      hours: 0
                      minutes: 0
                      seconds: 30
                      milliseconds: 0
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ states(stt_sensor) == 'no-text-recognized' }}"
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level: "{{ initial_volume }}"
                            target:
                              entity_id: !input musicplayer_device
                      - conditions:
                          - condition: template
                            value_template: "{{ states(stt_sensor) == 'end' }}"
                        sequence:
                          - wait_for_trigger:
                              - entity_id: !input mediaplayer_device
                                from: playing
                                to: idle
                                trigger: state
                            timeout: !input tts_timeout
                          - action: media_player.volume_set
                            data:
                              volume_level: "{{ initial_volume }}"
                            target:
                              entity_id: !input musicplayer_device
      - conditions:
          - condition: trigger
            id: broadcast
          - condition: state
            entity_id: !input musicplayer_device
            state: playing
        sequence:
          - variables:
              initial_volume: "{{ state_attr(musicplayer_device, 'volume_level') }}"
          - wait_for_trigger:
              - entity_id: !input mediaplayer_device
                to: playing
                trigger: state
          - action: media_player.volume_set
            data:
              volume_level: "{{ initial_volume | float * volume_duck }}"
            target:
              entity_id: !input musicplayer_device
          - wait_for_trigger:
              - entity_id: !input mediaplayer_device
                from: playing
                to: idle
                trigger: state
          - action: media_player.volume_set
            data:
              volume_level: "{{ initial_volume }}"
            target:
              entity_id: !input musicplayer_device
mode: restart
