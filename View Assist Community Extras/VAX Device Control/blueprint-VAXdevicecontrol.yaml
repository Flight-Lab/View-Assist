blueprint:
  name: View Assist Extras - Control display & audio template
  description:
    This is used as a base for setting up display control on a View Assist Satellite

    (View Assist control v 1.2.1 E 1.0.2)

    __Extras:__

    - Toggle intent pop up or intent view

    - Set music mode when musicplayer_device playing

    - Set normal mode when musicplayer_device idle for set duration
  domain: automation
  source_url: https://gist.github.com/Flight-Lab/fdcd3bb8392a994304929115b8f2526e
  author: Flab
  homeassistant:
    min_version: 2024.6.0
  input:
    satellite:
      name: Satellite
      description: The View Assist device entity to control (example sensor.viewassist_living_room)
      selector:
        entity:
          filter:
            - domain:
                - sensor
          multiple: false
    display:
      name: Display Device
      description: The browsermod display device used by View Assist (example sensor.browsermod_livingroom_browser_path)
      selector:
        entity:
          filter:
            - domain:
                - sensor
          multiple: false
    timer:
      name: Timer
      description: The associated timer device entity for the satellite (example timer.viewassist_living_room)
      selector:
        entity:
          filter:
            - domain:
                - timer
          multiple: false
    intent:
      name: Intent
      description: The above View Assist device entity intent sensor (example sensor.viewassist_living_room_intent)
      selector:
        entity:
          filter:
            - domain:
                - sensor
          multiple: false
    micdevice:
      name: Mic device
      description: The microphone entity to unmute on HA start/restart. (example switch.viewassist_living_room_mic)
      selector:
        entity:
          filter:
            - domain:
                - switch
          multiple: false
    dashboard:
      name: Dashboard
      description: The base dashboard for View Assist (do not include trailing slash)
      default: /dashboard-viewassist
    home:
      name: Default Home screen
      description: The screen to return to after timeout
      default: /dashboard-viewassist/clock
    music:
      name: Default Music View screen
      description: The view to return to when in music mode
      default: /dashboard-viewassist/music
    intent_view:
      name: Intent View screen
      description:
        The view to display for default HA actions for displaying those
        entities
      default: /dashboard-viewassist/intent
    micunmute:
      name: Unmute Mic
      description:
        Unmute microphone on HA start/restart.  Helpful for Stream Assist
        devices
      selector:
        boolean: {}
      default: true
    extras_stock:
      name: __Extras__ - Stock Config
      icon: mdi:exclamation-thick
      collapsed: true
      input:
        popup_intent:
          name: Pop-Up Intent
          description: Displays entity more info using BrowserMod pop-up instead of switching to the intent view.
          selector:
            boolean: {}
          default: false
        popup_intent_timeout:
          name: Pop-Up Intent Timeout
          description: How long for intent pop-up to stay on screen.
          selector:
            duration:
          default:
            hours: 0
            minutes: 0
            seconds: 10
    extras_mediaplayers:
      name: __Extras__ - Dual Media Players
      icon: mdi:volume-high
      description: Requires mediaplayer_device and musicplayer_device to use different media players in View Assist device config.
      collapsed: true
      input:
        music_mode_auto:
          name: Auto Music Mode
          description: Automatically enter music mode when musicplayer_device is playing.
          selector:
            boolean: {}
          default: false
        mediaplayer_device:
          name: mediaplayer_device
          description: The media_player used for TTS playback.
          selector:
            entity:
              filter:
                - domain:
                    - media_player
              multiple: false
          default: null
        musicplayer_device:
          name: musicplayer_device
          description: The media_player used for music playback.
          selector:
            entity:
              filter:
                - domain:
                    - media_player
              multiple: false
          default: null
        music_mode_timeout_switch:
          name: Music Mode Timeout Toggle
          description: Toggle music mode timeout on or off.
          selector:
            boolean: {}
          default: false
        music_mode_timeout:
          name: Music Mode Timeout Length
          description: Time to wait before turning music mode off after musicplayer_device is paused. Leave set to 0 if no timeout desired.
          selector:
            duration:
          default:
            hours: 00
            minutes: 05
            seconds: 00
trigger:
  - platform: state
    entity_id:
      - !input display
    id: ModeControl
  - platform: state
    entity_id:
      - !input satellite
    id: ModeControl
    attribute: mode
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer
    id: timerend
  - platform: state
    entity_id:
      - !input satellite
    id: Cycle
    attribute: mode
    to: cycle
  - platform: homeassistant
    event: start
    id: startup
  - platform: state
    entity_id:
      - !input intent
    id: intent
  - platform: state
    entity_id:
      - !input musicplayer_device
    from: null
    to: playing
    id: music_start
  - platform: state
    entity_id:
      - !input musicplayer_device
    to: idle
    from: playing
    for: !input music_mode_timeout
    id: music_stop
variables:
  satellite: !input satellite
  dashboard: !input dashboard
  display: !input display
  home: !input home
  music: !input music
  micdevice: !input micdevice
  micunmute: !input micunmute
  intent: !input intent
  intent_view: !input intent_view
  popup_intent: !input popup_intent
  mediaplayer_device: !input mediaplayer_device
  musicplayer_device: !input musicplayer_device
  music_mode_auto: !input music_mode_auto
  music_mode_timeout: !input music_mode_timeout
  music_mode_timeout_switch: !input music_mode_timeout_switch
action:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - ModeControl
        sequence:
          - service: timer.start
            data:
              duration: "{{states[satellite].attributes.view_timeout}}"
            target:
              entity_id: !input timer
      - conditions:
          - condition: trigger
            id:
              - timerend
        sequence:
          - if:
              - condition: state
                entity_id: !input satellite
                state: normal
                attribute: mode
                enabled: true
            then:
              - service: browser_mod.navigate
                data:
                  path: "{{home}}"
                target:
                  device_id: "{{device_id(display)}}"
          - if:
              - condition: state
                entity_id: !input satellite
                state: music
                attribute: mode
                enabled: true
            then:
              - service: browser_mod.navigate
                data:
                  path: "{{ music }}"
                target:
                  device_id: "{{device_id(display)}}"
      - conditions:
          - condition: trigger
            id:
              - Cycle
        sequence:
          - repeat:
              while:
                - condition: state
                  entity_id: !input satellite
                  state: cycle
                  attribute: mode
              sequence:
                - repeat:
                    for_each: "{{ state_attr (satellite,'cycle_view')}}"
                    sequence:
                      - if:
                          - condition: state
                            entity_id: !input satellite
                            state: cycle
                            attribute: mode
                        then:
                          - service: browser_mod.navigate
                            data:
                              path: "{{dashboard}}/{{repeat.item}}"
                            target:
                              device_id: "{{device_id(display)}}"
                      - if:
                          - condition: state
                            entity_id: !input satellite
                            state: cycle
                            attribute: mode
                        then:
                          - wait_for_trigger:
                              platform: event
                              event_type: timer.finished
                              event_data:
                                entity_id: !input timer
      - conditions:
          - condition: trigger
            id:
              - startup
        sequence:
          - if:
              - condition: template
                value_template: "{{ micunmute is true }}"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input micdevice
      - conditions:
          - condition: trigger
            id:
              - intent
        sequence:
          - if:
              - condition: template
                value_template:
                  '{{ state_attr(intent, ''intent_output'')[''response''][''speech''][''plain''][''speech'']  is
                  not in "Sorry, I couldn''t understand that"}}'
            then:
              - service: python_script.set_state
                data:
                  entity_id: "{{ satellite }}"
                  last_said: "{{ state_attr(intent, 'intent_output')['response']['speech']['plain']['speech']}}"
                enabled: true
          - service: python_script.set_state
            data:
              entity_id: "{{ satellite }}"
              intent_entities:
                "{% set list = state_attr(intent,'intent_output')['response']['data']['success']
                | map(attribute='id') | list %}  {% set prefix = ('light', 'switch', 'cover',
                'boolean') %}  {% set data = namespace(filtered_list=[]) %}  {% for item
                in list %}\n    {%- if item.startswith(prefix) %} \n        {% set data.filtered_list
                = data.filtered_list + [item] %}\n    {% endif -%}\n{% endfor %}  {% set
                list = data.filtered_list %} [ {% for e in list %}  {{ {'type': 'custom:button-card','entity':
                e, 'tap_action':{'action':'toggle'}, 'double_tap_action':{'action':'more-info'}}
                }} , {% endfor %} ]"
            enabled: true
          - if:
              - condition: template
                value_template: 
                  "{{ popup_intent != true and 
                  'id' in state_attr(intent, 'intent_output')['response']['data']['success'][0] }}"
            then:
              - service: browser_mod.navigate
                data:
                  path: "{{ intent_view }}"
                target:
                  device_id: "{{device_id(display)}}"
          - if:
              - condition: template
                value_template:
                  "{{ popup_intent != false and 
                  'id' in state_attr(intent, 'intent_output')['response']['data']['success'][0] }}"
            then:
              - service: browser_mod.more_info
                data:
                  large: true
                  ignore_popup_card: true
                  entity: >-
                    {{ state_attr(intent,
                    'intent_output')['response']['data']['success'][0]['id']}}
                target:
                  device_id: "{{device_id(display)}}"
              - delay:  !input popup_intent_timeout
              - service: browser_mod.close_popup
                metadata: {}
                data: {}
                target:
                  device_id: "{{device_id(display)}}"
      - conditions:
          - condition: trigger
            id:
              - music_start
          - condition: template
            value_template: "{{ music_mode_auto == true and mediaplayer_device != musicplayer_device }}"
          - condition: state
            entity_id: !input satellite
            attribute: mode
            state: normal
        sequence:
          - service: browser_mod.navigate
            data:
              path: "{{ music }}"
            target:
              device_id: "{{device_id(display)}}"
          - action: python_script.set_state
            data:
              entity_id: !input satellite
              mode: music
      - conditions:
          - condition: trigger
            id:
              - music_stop
          - condition: template
            value_template: "{{ music_mode_timeout_switch == true and mediaplayer_device != musicplayer_device }}"
          - condition: state
            entity_id: !input satellite
            attribute: mode
            state: music
        sequence:
          - service: browser_mod.navigate
            data:
              path: "{{home}}"
            target:
              device_id: "{{device_id(display)}}"
          - action: python_script.set_state
            data:
              entity_id: !input satellite
              mode: normal
mode: parallel
