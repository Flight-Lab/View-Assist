blueprint:
  name: View Assist - How's the Weather?
  description: Ask "How's the Weather?" and ViewAssist will respond with the weather
    and show the weather view (View Assist howstheweather v 1.0.0)
  domain: automation
  input:
    language:
      name: Language
      description: The desired spoken language (en, es, de, it, or nl)
      default: en
    command_prompt:
      name: Command Text
      description: The phrase you want to use to trigger the automation
      default: (How's | How is | What's | What is) [the] weather
    weather_entity:
      name: Weather Entity
      description: The entity that provides weather information (example weather.home)
      selector:
        entity:
          filter:
          - domain:
            - weather
          multiple: false
    view:
      name: Dashboard Weather view
      description: The View Assist dashboard view to use for weather (example /dashboard-viewassist/weather)
      default: /view-assist/weather
trigger:
- platform: conversation
  command: !input command_prompt
condition: []
action:
- variables:
    language: !input language
    target_satellite_device: "{{ view_assist_entity(trigger.device_id) }}"
    target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device')}}"
    target_satellite_device_type: "{{ state_attr(target_satellite_device, 'type')}}"
    weather_entity: !input weather_entity
    view: !input view
    translations:
      en:
        responses:
          temperature: "It's {temperature} degrees and {condition}"
      es:
        responses:
          temperature: "Hace {temperature} grados y estÃ¡ {condition}"
      nl:
        responses:
          temperature: "Het is {temperature} graden en {condition}"
      de:
        responses:
          temperature: "Es sind {temperature} grad und {condition}"  
      it:
        responses:
          temperature: "Ci sono {temperature} gradi e {condition}"          
- set_conversation_response: >-
    {{ translations[language]['responses']['temperature'].replace("{temperature}", state_attr(weather_entity, 'temperature')| string).replace("{condition}", states[weather_entity].state) }}
- if:
  - condition: template
    value_template: '{% if target_satellite_device_type != ''audio_only'' %}true{%
      else %}false{% endif %}'
  then:
  - action: view_assist.navigate
    data:
      device: "{{ target_satellite_device }}"
      path: "{{ view }}"
mode: single
