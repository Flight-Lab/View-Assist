button_card_templates:
  variable_template:
    variables:
      dashboardversion: 1.4.0
      default_satellite: |-
        [[[ try {
          return hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.type === "view_audio");
          } catch { return  ""}
        ]]]     
      var_assistsat_entity: |-
        [[[
          return localStorage.getItem("view_assist_sensor")
        ]]]
      var_assisting: |-
        [[[
          try 
          {
            var assist_assistbid = localStorage.getItem("view_assist_sensor");
            var micdevice = hass.states[assist_assistbid].attributes.mic_device;
            var micstate = hass.states[micdevice].state;
            var assisting = false;
            
            if (micdevice.includes("_stt")) 
            {
              assisting = micstate.includes("start") || micstate.includes("vad");
            }
            else if (micdevice.includes("assist_satellite"))
            {
              var assist_in_progress_sensor = micdevice;
              var assist_in_progress = hass.states[assist_in_progress_sensor].state;
              if (assist_in_progress === "listening" || assist_in_progress === "processing") {
                  assisting = true; 
              }              
            }
            else if (micdevice.includes("hassmic") || micdevice.includes("simple_state"))
            {
              assisting = micstate.includes("stt-listening") || 
                         micstate.includes("intent-processing") || 
                         micstate.includes("tts-speaking");
            }
            
            return `${assisting}`;
          } catch { return  ""}
        ]]]
      var_assisting_text: |-
        [[[
          try 
          {
            var assist_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var micdevice = hass.states[assist_assistbid].attributes.mic_device;
            var micstate = hass.states[micdevice].state;
            var assisting_text = "How can I assist?";
            if (micdevice.includes("_stt") && !micstate?.includes("start")) {
              assisting_text = "Processing request";
            } else if (micdevice.includes("_simple_state") && !micstate?.includes("stt-listening")) {
              assisting_text = "Processing request";
            } else if (micdevice.includes("assist_satellite") && micstate?.includes("processing")) {
              assisting_text = "Processing request";              
            } 
            return `${assisting_text}`;
          } catch { return  ""}
        ]]]              
      var_assist_prompt: |-
        [[[
          try {
            var assist_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var assist_prompt = hass.states[assist_assistbid].attributes.assist_prompt;
            return `${assist_prompt}`;
          } catch { return  "";}
        ]]]
      var_mic_switch: |-
        [[[
          try
          {
            var micdevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var micdevice = hass.states[micdevice_assistbid].attributes.mic_device;
            var mictype = hass.states[micdevice_assistbid].attributes.mic_type;
            if (mictype == "Stream Assist")
              {
                var micdevice = micdevice.replace("sensor","switch").replace("stt","mic");      
              }
            else if (mictype == "HassMic")
              {
                var micdevice = micdevice.replace("sensor","switch").replace("simple_state","microphone");      
              }
            else if (mictype == "Home Assistant Voice Satellite")
              {
                var micdevice = micdevice.replace("assist_satellite", "switch") + "_mute";
              }
            return `${micdevice}`;
          } catch { return  ""}
        ]]]   
      var_mediaplayer_device: |-
        [[[
          try {
            var mediadevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var mediadevice = hass.states[mediadevice_assistbid].attributes.mediaplayer_device;
            return `${mediadevice}`;
          } catch { return  "";}
        ]]]        
      var_mediaplayer_mute: |-
        [[[
          try {
            var mediaplayer_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var mediadevice = hass.states[mediaplayer_assistbid].attributes.mediaplayer_device;
            var mediaplayerstate = hass.states[mediadevice].attributes.is_volume_muted;
            return `${mediaplayerstate}`;
          } catch { return  "";}
        ]]]    
      var_assistsat_time_format: |-
        [[[ 
          if (variables.var_assistsat_entity_use_24_hour_time) {
            return '%H:%M';
          } else {
            return '%l:%M';
          }
        ]]]
      var_current_time: |-
        [[[ 
          return `<viewassist-clock server_time=true format='${variables.var_assistsat_time_format}'></viewassist-clock>`;
        ]]]
      var_date_short: |-
        [[[ 
          return `<viewassist-clock server_time=true format='%a, %b %e'></viewassist-clock>`;
        ]]]
      var_date_long: |-
        [[[ 
          return `<viewassist-clock server_time=true format='%A, %B %d, %Y'></viewassist-clock>`;
        ]]]          
      var_assistsat_entity_font_style: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.font_style;
          } catch { return  "Roboto"} 
        ]]]     
      var_assistsat_entity_weather_entity: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.weather_entity;
          } catch { return  ""} 
        ]]]      
      var_assistsat_entity_status_icons_size: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.status_icons_size;
          } catch { return  "6vw"} 
        ]]]
      var_responsive_status_icons_size: |
        [[[
          try {
            // Get base size from entity attributes (user's landscape preference)
            const baseSize = states[variables.var_assistsat_entity].attributes.status_icons_size || "6vw";
            
            // Check if we're in portrait mode and adjust accordingly
            if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
              
              // IMPROVED: Consistent scaling factor approach
              const baseSizeValue = parseFloat(baseSize);
              let scaleFactor;
              
              if (window.viewAssistResponsive.is_small_screen) {
                scaleFactor = 1.4;  // 40% larger on small portrait screens
              } else {
                scaleFactor = 1.3;  // 30% larger on large portrait screens  
              }
              
              const portraitSize = baseSizeValue * scaleFactor;
              return `${portraitSize}vw`;
            }
            
            // Return original landscape size unchanged
            return baseSize;
          } catch { 
            return window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait" ? "8.4vw" : "6vw";
          }
        ]]]
      var_assistsat_entity_use_24_hour_time: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.use_24_hour_time;
          } catch { return  false} 
        ]]]
      var_title: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.title;
          } catch { return  ""} 
        ]]]
      var_message: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.message;
          } catch { return  ""} 
        ]]]
      var_image: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.image;
          } catch { return  null; } 
        ]]]
      var_font_size: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.message_font_size;
          }
          catch { return  ""} 
        ]]]
      var_weather_temperature: |-
        [[[ 
          try {
            const s = states['sensor.pws_temperature_median'].state;
            return s.split('.')[0] + '°';
          } catch {
            return "--°";
          }
        ]]]
      var_weather_icon: |-
        [[[
          const weatherIconsDay  = {
            "clear-night": "mdi:weather-night", 
            "cloudy": "mdi:weather-cloudy",
            "dust": "mdi:weather-dust",
            "fog": "mdi:weather-fog",
            "hail": "mdi:weather-hail",
            "hazy": "mdi:weather-hazy", 
            "hurricane": "mdi:weather-hurricane",
            "lightning": "mdi:weather-lightning",
            "lightning-rainy": "mdi:weather-lightning-rainy",
            "partlycloudy": "mdi:weather-partly-cloudy",
            "partly-lightning": "mdi:weather-partly-lightning", 
            "partly-rainy": "mdi:weather-partly-rainy",
            "partly-snowy": "mdi:weather-partly-snowy", 
            "partly-snowy-rainy": "mdi:weather-partly-snowy-rainy", 
            "pouring": "mdi:weather-pouring",
            "rainy": "mdi:weather-rainy",
            "snowy": "mdi:weather-snowy",
            "snowy-heavy": "mdi:weather-snowy-heavy",
            "snowy-rainy": "mdi:weather-snowy-rainy",
            "sunny": "mdi:weather-sunny",
            "tornado": "mdi:weather-tornado",
            "windy":  "mdi:weather-windy",
            "windy-variant": "mdi:weather-windy-variant",
          };
          const weatherIconsNight = {
            ...weatherIconsDay,
            clear: "mdi:weather-night",
            sunny: "mdi:weather-night",
            partlycloudy: "mdi:weather-night-partly-cloudy",
          };
          try
          {
            var condition = states[variables. var_assistsat_entity_weather_entity].state;
            if (states['sun.sun'].state === 'above_horizon') {
              var weather_icon = weatherIconsDay[condition]; 
            } else {
              var weather_icon = weatherIconsDay[condition];
            }
            
            if (typeof(weather_icon) === 'undefined') { 
              var weather_icon = "mdi:weather-cloudy-alert" 
            }   
            return `${weather_icon}`;
          } catch { return  "mdi:weather-cloudy-alert"} 
        ]]]
      var_current_view: |-
        [[[
          try {
            const pathname = window.location.pathname;
            if (pathname) {
              const match = pathname.match(/\/view-assist\/([^\/]+)/);
              if (match && match[1]) {
                return match[1];
              }
            }
            
            const currentPath = hass.states[variables.var_assistsat_entity].attributes.current_path;
            if (currentPath) {
              const match = currentPath.match(/\/view-assist\/([^\/]+)/);
              if (match && match[1]) {
                return match[1];
              }
            }
            return "";
          } catch { return ""; }
        ]]]
      var_responsive_font_scale: |-
        [[[
          try {
            // Base font scale multipliers for different screen contexts
            const responsive = window.viewAssistResponsive;
            if (!responsive) return 1;
            
            if (responsive.orientation === "portrait") {
              if (responsive.is_small_screen) return 0.85;      // Smaller fonts on small portrait screens
              if (responsive.is_tablet) return 1.1;            // Slightly larger on portrait tablets
              return 1.25;                                     // Larger on portrait desktop/large screens
            } else {
              if (responsive.is_small_screen) return 0.9;      // Slightly smaller on small landscape
              if (responsive.is_tablet) return 1.0;           // Standard on landscape tablets
              return 1.2;                                      // Slightly larger on large landscape
            }
          } catch { return 1; }
        ]]]
  responsive_base:
    variables:
      var_orientation: |-
        [[[
          // Initialize responsive globals if not already present
          if (!window.viewAssistResponsive) {
            window.viewAssistResponsive = {
              orientation: window.innerHeight > window.innerWidth ? "portrait" : "landscape",
              is_small_screen: window.innerWidth < 600,
              is_tablet: window.innerWidth >= 600 && window.innerWidth < 1024
            };
            
            // Set up resize listener to update orientation and screen size
            // Debounced resize listener to prevent excessive updates
            let resizeTimeout;
            window.addEventListener('resize', () => {
              clearTimeout(resizeTimeout);
              resizeTimeout = setTimeout(() => {
                const oldState = { ...window.viewAssistResponsive };
                
                // Update responsive state
                const newOrientation = window.innerHeight > window.innerWidth ? "portrait" : "landscape";
                const newSmallScreen = window.innerWidth < 600;
                const newTablet = window.innerWidth >= 600 && window.innerWidth < 1024;
                
                // Only update if something actually changed
                if (oldState.orientation !== newOrientation || 
                    oldState.is_small_screen !== newSmallScreen ||
                    oldState.is_tablet !== newTablet) {
                  
                  window.viewAssistResponsive.orientation = newOrientation;
                  window.viewAssistResponsive.is_small_screen = newSmallScreen;
                  window.viewAssistResponsive.is_tablet = newTablet;
                  
                  // Dispatch custom event for any components that need to react
                  const event = new CustomEvent('view-assist-responsive-change', {
                    detail: window.viewAssistResponsive
                  });
                  window.dispatchEvent(event);
                }
              }, 150); // 150ms debounce
            });
          }
          
          return window.viewAssistResponsive.orientation;
        ]]]
  body_template_sections:
    template: assist_template
    show_state: false
    show_icon: false
    show_name: false
    triggers_update: all
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  ""
          }]]]
        mode: hold
    double_tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  "" }
          ]]]
        mode: normal
    hold_action:
      action: call-service
      service: switch.toggle
      service_data:
        entity_id: '[[[ try { return variables.var_mic_switch } catch { return  "" } ]]]'
    styles:
      grid:
        - grid-template-areas: |
            "title status"  
            "message message"
            "assist assist"        
        - grid-template-rows: min-content 1fr min-content
        - grid-template-columns: 1fr 1fr
        - row-gap: .5rem
      card:
        - min-height: 200px
        - height: auto
        - background: |
            [[[
              if (variables.background != null) {
                return `center / cover no-repeat url(${variables.background})`
              } else if (variables.var_background != null) {
                  return `center / cover no-repeat url(${variables.var_background})`
              } else { 
                return `center / cover no-repeat ${variables.background_color}`
              }
            ]]]        
        - background-size: cover
        - border-radius: 12px
        - overflow: hidden
        - color: white
        - font-family: |-
            [[[
              return `"${variables.var_assistsat_entity_font_style}", sans-serif`;
            ]]] 
        - font-weight: 300
        - position: relative
      custom_fields:
        title:
          - position: absolute
          - justify-self: start
          - align-self: start
          - z-index: 5
          - font-size: |-
              [[[
                const baseSize = 150;  // Base percentage - smaller for sections
                const scale = parseFloat(variables.var_responsive_font_scale);
                return `${Math.round(baseSize * scale)}%`;
              ]]]
          - font-weight: 400
          - width: max-content
          - margin-left: 4%
          - margin-top: 2%
        status:
          - position: fixed
          - top: 20px
          - right: 20px
          - z-index: 9999
          - border-radius: 12px
    custom_fields:
      title: '[[[ return variables.var_title ]]]'
      status:
        card:
          type: custom:layout-card
          layout_type: custom:horizontal-layout
          cards:
            - type: custom:layout-card
              layout_type: grid-layout
              layout:
                margin: 0
                card_margin: |-
                  [[[
                    if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                      return window.viewAssistResponsive.is_small_screen ? "0.5vh" : "0.75vh";
                    } else {
                      return "0";
                    }
                  ]]]
                place-content: end
                grid-template-columns: |
                  [[[
                    // Slightly smaller icons for sections view
                    const iconSize = parseFloat(variables.var_responsive_status_icons_size) * 0.8;
                    return `repeat(auto-fit, minmax(max(${iconSize}vw, ${iconSize}vw), ${iconSize}vw))`;
                  ]]]                
              cards: |-
                [[[{
                  const buttonList = [];
                  
                  try {
                    const vaEntity = variables.var_assistsat_entity;
                    if (!vaEntity || !hass.states[vaEntity]) {
                      return [];
                    }
                    
                    const statusIcons = hass.states[vaEntity].attributes.status_icons || [];
                    const menuItems = hass.states[vaEntity].attributes.menu_items || [];
                    const menuActive = hass.states[vaEntity].attributes.menu_active || false;
                    
                    const currentView = variables.var_current_view;
                    
                    function isCurrentView(item) {
                      if (!currentView) return false;
                      
                      if (typeof item === 'string' && !item.includes(':')) {
                        if (item === currentView) return true;
                        
                        const templateViewMap = {
                          "home": "clock"
                        };
                        if (templateViewMap[item] === currentView) return true;
                        return false;
                      }
                      
                      if (typeof item === 'string' && item.includes(':')) {
                        const parts = item.split('|');
                        const typeAndTarget = parts[0];
                        const [type, target] = typeAndTarget.split(':');
                        
                        if (type === 'view') {
                          const viewName = target.includes('/') ? 
                            target.split('/').pop() : target;
                          return viewName === currentView;
                        }
                      }
                      
                      return false;
                    }
                    
                    const addedItems = new Set();
                    
                    function addIconToList(icon, isDynamicItem = false) {
                      if (icon === "menu") return;
                      
                      if (menuActive && isCurrentView(icon)) {
                        return;
                      }
                      
                      let buttonConfig;
                      if (isDynamicItem) {
                        const type = icon.split(':')[0];
                        buttonConfig = {
                          type: "custom:button-card",
                          template: `dynamic_${type}_item`,
                          variables: {
                            menu_item: icon,
                            entity_id: vaEntity
                          }
                        };
                      } else {
                        buttonConfig = {
                          type: "custom:button-card",
                          template: icon
                        };
                      }
                      
                      const key = icon;
                      if (addedItems.has(key)) return;
                      
                      addedItems.add(key);
                      buttonList.push(buttonConfig);
                    }
                    
                    if (menuActive) {
                      const reversedMenuItems = [...menuItems].reverse();
                      reversedMenuItems.forEach(item => {
                        if (item !== "menu") {
                          if (item.includes(':')) {
                            addIconToList(item, true);
                          } else {
                            addIconToList(item, false);
                          }
                        }
                      });
                    }

                    statusIcons.forEach(icon => {
                      if (icon !== "menu") {
                        if (icon.includes(':')) {
                          addIconToList(icon, true);
                        } else {
                          addIconToList(icon, false);
                        }
                      }
                    });
                    
                    if (hass.states[vaEntity].attributes.menu_config === "menu_enabled_button_visible" && 
                        !addedItems.has("menu")) {
                      buttonList.push({
                        type: "custom:button-card",
                        template: "menu"
                      });
                    }
                  } catch (error) {
                  }
                  
                  return buttonList;
                }]]]
  body_template:
    template: assist_template
    show_state: false
    show_icon: false
    show_name: false
    triggers_update: all
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  ""
          }]]]
        mode: hold
    double_tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  "" }
          ]]]
        mode: normal
    hold_action:
      action: call-service
      service: switch.toggle
      service_data:
        entity_id: '[[[ try { return variables.var_mic_switch } catch { return  "" } ]]]'
    styles:
      grid:
        - grid-template-areas: |
            "title status"  
            "message message"
            "assist assist"        
        - grid-template-rows: min-content 30vh min-content
        - grid-template-columns: 1fr 1fr
        - row-gap: .5rem
      card:
        - min-height: 100vh
        - background: |
            [[[
              if (variables.background != null) {
                return `center / cover no-repeat url(${variables.background})`
              } else if (variables.var_background != null) {
                  return `center / cover no-repeat url(${variables.var_background})`
              } else { 
                return `center / cover no-repeat ${variables.background_color}`
              }
            ]]]        
        - background-size: cover
        - border-radius: 0px
        - overflow: hidden
        - color: white
        - font-family: |-
            [[[
              return `"${variables.var_assistsat_entity_font_style}", sans-serif`;
            ]]] 
        - font-weight: 300
        - aspect-ratio: |-
            [[[
              // Dynamic aspect ratio based on orientation
              if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                return window.viewAssistResponsive.is_small_screen ? "9 / 16" : "3 / 4";
              } else {
                return "16 / 9";  // Better than fixed 2/1 for landscape
              }
            ]]]
      custom_fields:
        title:
          - position: absolute
          - justify-self: start
          - align-self: start
          - z-index: 1
          - font-size: |-
              [[[
                const baseSize = 200;  // Base percentage
                const scale = parseFloat(variables.var_responsive_font_scale);
                return `${Math.round(baseSize * scale)}%`;
              ]]]
          - font-weight: 400
          - width: max-content
          - margin-left: 2%
          - margin-top: '-4%'
        status:
          - position: absolute
          - justify-self: end
          - align-self: end
          - justify-content: right
          - top: 0vh
          - right: 0vw
          - z-index: 1
          - padding-right: |-
              [[[
                if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "1vw" : "2vw";
                } else {
                  return "0";
                }
              ]]]
          - padding-top: |-
              [[[
                if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "1vh" : "1.5vh";
                } else {
                  return "0";
                }
              ]]]
    custom_fields:
      title: '[[[ return variables.var_title ]]]'
      status:
        card:
          type: custom:layout-card
          layout_type: custom:horizontal-layout
          cards:
            - type: custom:layout-card
              layout_type: grid-layout
              layout:
                margin: 0
                card_margin: |-
                  [[[
                    if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                      return window.viewAssistResponsive.is_small_screen ? "0.5vh" : "0.75vh";
                    } else {
                      return "0";
                    }
                  ]]]
                place-content: end
                grid-template-columns: |
                  [[[
                    // Use the responsive status icon size instead of base size
                    const iconSize = variables.var_responsive_status_icons_size;
                    return `repeat(auto-fit, minmax(max(${iconSize}, ${iconSize}), ${iconSize}))`;
                  ]]]                
              cards: |-
                [[[{
                  const buttonList = [];
                  
                  try {
                    const vaEntity = variables.var_assistsat_entity;
                    if (!vaEntity || !hass.states[vaEntity]) {
                      return [];
                    }
                    
                    const statusIcons = hass.states[vaEntity].attributes.status_icons || [];
                    const menuItems = hass.states[vaEntity].attributes.menu_items || [];
                    const menuActive = hass.states[vaEntity].attributes.menu_active || false;
                    
                    const currentView = variables.var_current_view;
                    
                    function isCurrentView(item) {
                      if (!currentView) return false;
                      
                      if (typeof item === 'string' && !item.includes(':')) {
                        if (item === currentView) return true;
                        
                        const templateViewMap = {
                          "home": "clock"
                        };
                        if (templateViewMap[item] === currentView) return true;
                        return false;
                      }
                      
                      if (typeof item === 'string' && item.includes(':')) {
                        const parts = item.split('|');
                        const typeAndTarget = parts[0];
                        const [type, target] = typeAndTarget.split(':');
                        
                        if (type === 'view') {
                          const viewName = target.includes('/') ? 
                            target.split('/').pop() : target;
                          return viewName === currentView;
                        }
                      }
                      
                      return false;
                    }
                    
                    const addedItems = new Set();
                    
                    function addIconToList(icon, isDynamicItem = false) {
                      if (icon === "menu") return;
                      
                      if (menuActive && isCurrentView(icon)) {
                        return;
                      }
                      
                      let buttonConfig;
                      if (isDynamicItem) {
                        const type = icon.split(':')[0];
                        buttonConfig = {
                          type: "custom:button-card",
                          template: `dynamic_${type}_item`,
                          variables: {
                            menu_item: icon,
                            entity_id: vaEntity
                          }
                        };
                      } else {
                        buttonConfig = {
                          type: "custom:button-card",
                          template: icon
                        };
                      }
                      
                      const key = icon;
                      if (addedItems.has(key)) return;
                      
                      addedItems.add(key);
                      buttonList.push(buttonConfig);
                    }
                    
                    if (menuActive) {
                      const reversedMenuItems = [...menuItems].reverse();
                      reversedMenuItems.forEach(item => {
                        if (item !== "menu") {
                          if (item.includes(':')) {
                            addIconToList(item, true);
                          } else {
                            addIconToList(item, false);
                          }
                        }
                      });
                    }

                    statusIcons.forEach(icon => {
                      if (icon !== "menu") {
                        if (icon.includes(':')) {
                          addIconToList(icon, true);
                        } else {
                          addIconToList(icon, false);
                        }
                      }
                    });
                    
                    if (hass.states[vaEntity].attributes.menu_config === "menu_enabled_button_visible" && 
                        !addedItems.has("menu")) {
                      buttonList.push({
                        type: "custom:button-card",
                        template: "menu"
                      });
                    }
                  } catch (error) {
                  }
                  
                  return buttonList;
                }]]]
  assist_template:
    styles:
      card: null
      custom_fields:
        assistbar:
          - display: >-
              [[[ if (variables.var_assist_prompt == "flashing bar" &
              variables.var_assisting == "true") return "block"; else return
              "none"; ]]]
          - justify-self: center
          - height: |-
              [[[
                // Responsive height for the assist bar
                if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "8vh" : "10vh";
                } else {
                  return "10vh";
                }
              ]]]
          - position: absolute
          - width: 100%
          - z-index: 1
          - bottom: 0%
          - animation: >-
              [[[ if (variables.var_assisting_text.includes("How")) return
              "pulse 2s infinite"; else return "pulse2 2s infinite"]]]        
          - height: 10px
        filterblur:
          - display: >-
              [[[ if (variables.var_assist_prompt == "blur pop up" &
              variables.var_assisting == "true") return "block"; else return
              "none"; ]]]       
          - position: fixed
          - top: 0
          - left: 0
          - width: 100vw
          - height: 100vh
          - backdrop-filter: brightness(100%)
          - overflow: hidden
          - color: transparent
          - z-index: 9998
          - animation: '[[[ return "brightness .1s ease-in-out forwards" ]]]'
          - pointer-events: none
        assistblur:
          - display: >-
              [[[ if (variables.var_assist_prompt == "blur pop up" &
              variables.var_assisting == "true") return "block"; else return
              "none"; ]]]           
          - position: fixed
          - top: 50%
          - left: 50%
          - transform: translate(-50%, -50%)
          - z-index: 9999
          - opacity: 0
          - animation: '[[[ return "growFromCenter .4s ease-in-out forwards" ]]]'
          - font-family: '"Roboto", sans-serif'
          - width: |-
              [[[
                if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "85vw" : "75vw";
                } else {
                  return "45vw";
                }
              ]]]
          - min-width: |-
              [[[
                if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "80vw" : "70vw";
                } else {
                  return "50vw";
                }
              ]]]
    extra_styles: |
      @keyframes pulse {
        0%, 100% {
          background-color: #f56a3f;
          transform: translateZ(0);
        }
        50% {
          background-color: #9e42b0;
          transform: translateZ(0);
        }
      }
      @keyframes pulse2 {
        0%, 100% {
          background-color: #03A9F4;
          transform: translateZ(0);
        }
        50% {
          background-color: #cfe2f3;
          transform: translateZ(0);
        }
      }      
      @keyframes growFromCenter {
        75% {
          transform: translate(-50%, -50%) scale(0) translateZ(0);
          opacity: 0;
        }
        100% {
          transform: translate(-50%, -50%) scale(1) translateZ(0);
          opacity: 1;
        }
      }
      @keyframes brightness {
        0% {
          backdrop-filter: brightness(100%) blur(0px);
          z-index: 9998;
        }
        100% {
          backdrop-filter: brightness(50%) blur(10px); 
          z-index: 9999; 
        }
      }
    custom_fields:
      assistbar: .
      filterblur: .
      assistblur:
        card:
          type: custom:button-card
          name: '[[[ return variables.var_assisting_text ]]]'
          show_icon: true
          icon: >-
            [[[ if (variables.var_assisting_text.includes("How")) return
            "mdi:comment-processing-outline"; else return "mdi:dots-horizontal";
            ]]]  
          tap_action:
            action: none
          styles:
            card:
              - display: >-
                  [[[ if (variables.var_assisting == "true") return "block";
                  else return "none"; ]]]  
              - padding: |-
                  [[[
                    // Enhanced responsive padding for the assist blur card
                    if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                      return window.viewAssistResponsive.is_small_screen ? "3vh 2vh" : "4vh 3vh";
                    } else {
                      return "4vh";
                    }
                  ]]]
              - background: white
              - height: |-
                  [[[
                    // Enhanced responsive height for the assist blur card
                    if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                      return window.viewAssistResponsive.is_small_screen ? "14vh" : "16vh";
                    } else {
                      return "15vh";
                    }
                  ]]]
              - border-radius: |-
                  [[[
                    // Enhanced responsive border radius
                    if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                      return window.viewAssistResponsive.is_small_screen ? "7vh" : "8vh";
                    } else {
                      return "8vh";
                    }
                  ]]]
            grid:
              - grid-template-areas: '"i n"'
              - grid-template-columns: 1fr 4fr
              - grid-template-rows: 1fr
            icon:
              - color: rgb(3,169,244)
              - width: |-
                  [[[
                    // Enhanced responsive icon size
                    if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                      return window.viewAssistResponsive.is_small_screen ? "10vw" : "12vw";
                    } else {
                      return "10vw";
                    }
                  ]]]
            name:
              - color: black
              - text-align: start
              - font-size: |-
                  [[[
                    // IMPROVED: Use unified scaling instead of scattered vh calculations
                    const baseSize = 5;  // Base vh
                    const scale = parseFloat(variables.var_responsive_font_scale);
                    return `${Math.round(baseSize * scale * 10) / 10}vh`;
                  ]]]
              - font-weight: bold
  icon_template:
    template: variable_template
    color_type: card
    show_name: false
    size: 90%
    padding: 0px
    styles:
      card:
        - background-color: transparent
        - border-width: 0px
        - aspect-ratio: 1 / 1
      icon:
        - display: grid
        - color: white
  dynamic_view_item:
    template: icon_template
    icon: |-
      [[[
        const parts = variables.menu_item.split('|');
        const icon = parts.length > 1 ? parts[1] : 'view-dashboard';
        return `mdi:${icon}`;
      ]]]
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.entity_id; ]]]'
        path: |-
          [[[
            const parts = variables.menu_item.split('|');
            const typeAndTarget = parts[0];
            const target = typeAndTarget.split(':')[1];
            return target.startsWith('/') ? target : `/view-assist/${target}`;
          ]]]
  dynamic_entity_item:
    template: icon_template
    state_display: none
    entity: |-
      [[[
        const parts = variables.menu_item.split('|');
        const typeAndTarget = parts[0];
        return typeAndTarget.split(':')[1];
      ]]]
    icon: |-
      [[[
        const parts = variables.menu_item.split('|');
        const typeAndTarget = parts[0];
        const entityId = typeAndTarget.split(':')[1];
        const iconOptions = parts.length > 1 ? parts[1].split(',') : ['help-circle'];
        
        // Default icon is first option
        let icon = iconOptions[0];
        
        // If there are state-dependent options and entity exists
        if (iconOptions.length > 1 && hass.states[entityId]) {
          const state = hass.states[entityId].state;
          
          // For binary entities like lights, switches
          if (state === 'off' && iconOptions[1]) {
            icon = iconOptions[1];
          }
        }
        
        return `mdi:${icon}`;
      ]]]
    tap_action:
      action: toggle
      entity: |-
        [[[
          const parts = variables.menu_item.split('|');
          const typeAndTarget = parts[0];
          return typeAndTarget.split(':')[1];
        ]]]
    hold_action:
      action: more-info
      entity: |-
        [[[
          const parts = variables.menu_item.split('|');
          const typeAndTarget = parts[0];
          return typeAndTarget.split(':')[1];
        ]]]
  dynamic_service_item:
    template: icon_template
    icon: |-
      [[[
        const parts = variables.menu_item.split('|');
        const icon = parts.length > 1 ? parts[1] : 'cog';
        return `mdi:${icon}`;
      ]]]
    tap_action:
      action: call-service
      service: |-
        [[[
          const parts = variables.menu_item.split('|');
          const typeAndTarget = parts[0];
          return typeAndTarget.split(':')[1];
        ]]]
      service_data: {}
  mediaplayer:
    type: custom:button-card
    template: icon_template
    icon: mdi:volume-off
    tap_action:
      action: call-service
      service: media_player.volume_mute
      service_data:
        entity_id: '[[[ return variables.var_mediaplayer_device ]]]'
        is_volume_muted: false
  mic:
    type: custom:button-card
    template: icon_template
    icon: mdi:microphone-off
    tap_action:
      action: call-service
      service: homeassistant.turn_off
      service_data:
        entity_id: '[[[ return variables.var_mic_switch ]]]'
  hold:
    type: custom:button-card
    template: icon_template
    icon: mdi:hand-back-left
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        mode: normal
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  cycle:
    type: custom:button-card
    template: icon_template
    icon: mdi:sync
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        mode: normal
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  dnd:
    type: custom:button-card
    template: icon_template
    icon: mdi:minus-circle
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        do_not_disturb: false
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  weather:
    type: custom:button-card
    template: icon_template
    icon: mdi:weather-sunny
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/weather
  home:
    type: custom:button-card
    template: icon_template
    icon: mdi:home
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/clock
  camera:
    type: custom:button-card
    template: icon_template
    icon: mdi:cctv
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/camera
  thermostat:
    type: custom:button-card
    template: icon_template
    icon: mdi:thermostat
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/thermostat
  menu:
    type: custom:button-card
    template: icon_template
    icon: mdi:menu
    tap_action:
      action: call-service
      service: view_assist.toggle_menu
      service_data:
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
        show: >-
          [[[ return
          !states[variables.var_assistsat_entity].attributes.menu_active ]]]
views:
  - title: Home
