button_card_templates:
  variable_template:
    variables:
      default_satellite: |-
        [[[ try {
          return hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.type === "view_audio");
          } catch { return  ""}
        ]]]     
      var_assistsat_entity: |-
        [[[
          return localStorage.getItem("view_assist_sensor")
        ]]] 
      var_assisting: |-
        [[[
          try 
          {
            var assist_assistbid = localStorage.getItem("view_assist_sensor");
            var micdevice = hass.states[assist_assistbid].attributes.mic_device;
            var micstate = hass.states[micdevice].state;
            var assisting = false;
            
            if (micdevice.includes("_stt")) 
            {
              assisting = micstate.includes("start") || micstate.includes("vad");
            }
            else if (micdevice.includes("assist_satellite"))
            {
              var assist_in_progress_sensor = micdevice;
              var assist_in_progress = hass.states[assist_in_progress_sensor].state;
              if (assist_in_progress === "listening" || assist_in_progress === "processing") {
                  assisting = true; 
              }              
            }
            else if (micdevice.includes("hassmic") || micdevice.includes("simple_state"))
            {
              assisting = micstate.includes("stt-listening") || 
                         micstate.includes("intent-processing") || 
                         micstate.includes("tts-speaking");
            }
            
            return `${assisting}`;
          } catch { return  ""}
        ]]]        
      var_assisting_text: |-
        [[[
          try 
          {
            var assist_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var micdevice = hass.states[assist_assistbid].attributes.mic_device;
            var micstate = hass.states[micdevice].state;
            var assisting_text = "How can I assist?";
            if (micdevice.includes("_stt") && !micstate?.includes("start")) {
              assisting_text = "Processing request";
            } else if (micdevice.includes("_simple_state") && !micstate?.includes("stt-listening")) {
              assisting_text = "Processing request";
            } else if (micdevice.includes("assist_satellite") && micstate?.includes("processing")) {
              assisting_text = "Processing request";              
            } 
            return `${assisting_text}`;
          } catch { return  ""}
        ]]]              
      var_assist_prompt: |-
        [[[
          try {
            var assist_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var assist_prompt = hass.states[assist_assistbid].attributes.assist_prompt;
            return `${assist_prompt}`;
          } catch { return  "";}
        ]]]
      var_mic_switch: |-
        [[[
          try
          {
            var micdevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var micdevice = hass.states[micdevice_assistbid].attributes.mic_device;
            var mictype = hass.states[micdevice_assistbid].attributes.mic_type;
            if (mictype == "Stream Assist")
              {
                var micdevice = micdevice.replace("sensor","switch").replace("stt","mic");      
              }
            else if (mictype == "HassMic")
              {
                var micdevice = micdevice.replace("sensor","switch").replace("simple_state","microphone");      
              }
            else if (mictype == "Home Assistant Voice Satellite")
              {
                var micdevice = micdevice.replace("assist_satellite", "switch") + "_mute";
              }
            return `${micdevice}`;
          } catch { return  ""}
        ]]]                
      var_mediaplayer_device: |-
        [[[
          try {
            var mediadevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var mediadevice = hass.states[mediadevice_assistbid].attributes.mediaplayer_device;
            return `${mediadevice}`;
          } catch { return  "";}
        ]]]        
      var_mediaplayer_mute: |-
        [[[
          try {
            var mediaplayer_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var mediadevice = hass.states[mediaplayer_assistbid].attributes.mediaplayer_device;
            var mediaplayerstate = hass.states[mediadevice].attributes.is_volume_muted;
            return `${mediaplayerstate}`;
          } catch { return  "";}
        ]]]    
      var_assistsat_time_format: |-
        [[[ 
          if (variables.var_assistsat_entity_use_24_hour_time) {
            return '%H:%M';
          } else {
            return '%l:%M';
          }
        ]]]
      var_current_time: |-
        [[[ 
          return `<viewassist-clock server_time=true format='${variables.var_assistsat_time_format}'></viewassist-clock>`;
        ]]]
      var_date_short: |-
        [[[ 
          return `<viewassist-clock server_time=true format='%a, %b %e'></viewassist-clock>`;
        ]]]
      var_date_long: |-
        [[[ 
          return `<viewassist-clock server_time=true format='%A, %B %d, %Y'></viewassist-clock>`;
        ]]]          
      var_assistsat_entity_font_style: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.font_style;
          } catch { return  "Roboto"} 
        ]]]     
      var_assistsat_entity_weather_entity: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.weather_entity;
          } catch { return  ""} 
        ]]]      
      var_assistsat_entity_status_icons_size: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.status_icons_size;
          } catch { return  "6vw"} 
        ]]]
      var_assistsat_entity_use_24_hour_time: |
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.use_24_hour_time;
          } catch { return  false} 
        ]]]
      var_title: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.title;
          } catch { return  ""} 
        ]]]
      var_message: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.message;
          } catch { return  ""} 
        ]]]
      var_image: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.image;
          } catch { return  ""} 
        ]]]
      var_font_size: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.message_font_size;
          }
          catch { return  ""} 
        ]]]
      var_weather_temperature: |-
        [[[ 
          try 
          {
            return (states[variables. var_assistsat_entity_weather_entity].attributes.temperature  + 'Â°');
          }
          catch { return  ""}
        ]]]      
      var_weather_icon: |-
        [[[
          const weatherIconsDay  = {
            "clear-night": "mdi:weather-night", 
            "cloudy": "mdi:weather-cloudy",
            "dust": "mdi:weather-dust",
            "fog": "mdi:weather-fog",
            "hail": "mdi:weather-hail",
            "hazy": "mdi:weather-hazy", 
            "hurricane": "mdi:weather-hurricane",
            "lightning": "mdi:weather-lightning",
            "lightning-rainy": "mdi:weather-lightning-rainy",
            "partlycloudy": "mdi:weather-partly-cloudy",
            "partly-lightning": "mdi:weather-partly-lightning", 
            "partly-rainy": "mdi:weather-partly-rainy",
            "partly-snowy": "mdi:weather-partly-snowy", 
            "partly-snowy-rainy": "mdi:weather-partly-snowy-rainy", 
            "pouring": "mdi:weather-pouring",
            "rainy": "mdi:weather-rainy",
            "snowy": "mdi:weather-snowy",
            "snowy-heavy": "mdi:weather-snowy-heavy",
            "snowy-rainy": "mdi:weather-snowy-rainy",
            "sunny": "mdi:weather-sunny",
            "tornado": "mdi:weather-tornado",
            "windy":  "mdi:weather-windy",
            "windy-variant": "mdi:weather-windy-variant",
          };
          const weatherIconsNight = {
            ...weatherIconsDay,
            clear: "mdi:weather-night",
            sunny: "mdi:weather-night",
            partlycloudy: "mdi:weather-night-partly-cloudy",
          };
          try
          {
            var condition = states[variables. var_assistsat_entity_weather_entity].state;
            if (states['sun.sun'] === 'above_horizon') {
              var weather_icon = weatherIconsDay[condition]; 
            } else {
              var weather_icon = weatherIconsDay[condition]; 
            }
            
            if (typeof(weather_icon) === 'undefined') { 
              var weather_icon = "mdi:help" 
            }   
            return `${weather_icon}`;
          } catch { return  ""} 
        ]]]
  responsive_base:
    variables:
      var_orientation: |-
        [[[
          if (!window.viewAssistResponsive) {
            window.viewAssistResponsive = {
              orientation: window.innerHeight > window.innerWidth ? "portrait" : "landscape",
              is_small_screen: window.innerWidth < 600
            };
            
            window.addEventListener('resize', () => {
              const newOrientation = window.innerHeight > window.innerWidth ? "portrait" : "landscape";
              const newSmallScreen = window.innerWidth < 600;
              
              if (window.viewAssistResponsive.orientation !== newOrientation || 
                  window.viewAssistResponsive.is_small_screen !== newSmallScreen) {
                window.viewAssistResponsive.orientation = newOrientation;
                window.viewAssistResponsive.is_small_screen = newSmallScreen;
                
                const event = new Event('view-assist-screen-change');
                window.dispatchEvent(event);
              }
            });
          }
          
          return window.viewAssistResponsive.orientation;
        ]]]
  body_template:
    template: assist_template
    show_state: false
    show_icon: false
    show_name: false
    triggers_update: all
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  ""
          }]]]
        mode: hold
    double_tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  "" }
          ]]]
        mode: normal
    hold_action:
      action: call-service
      service: switch.toggle
      service_data:
        entity_id: '[[[ try { return variables.var_mic_switch } catch { return  "" } ]]]'
    aspect_ratio: 2/1
    styles:
      grid:
        - grid-template-areas: |
            "title status"  
            "message message"
            "assist assist"        
        - grid-template-rows: min-content 30vh min-content
        - grid-template-columns: 1fr 1fr
        - row-gap: .5rem
      card:
        - min-height: 100vh
        - background: |
            [[[
              if (variables.background != null) {
                return `center / cover no-repeat url(${variables.background})`
              } else if (variables.var_background != null) {
                  return `center / cover no-repeat url(${variables.var_background})`
              } else { 
                return `center / cover no-repeat ${variables.background_color}`
              }
            ]]]        
        - background-size: cover
        - border-radius: 0px
        - overflow: hidden
        - color: white
        - font-family: |-
            [[[
              return `"${variables.var_assistsat_entity_font_style}", sans-serif`;
            ]]] 
        - font-weight: 300
      custom_fields:
        title:
          - position: absolute
          - justify-self: start
          - align-self: start
          - z-index: 1
          - font-size: 200%
          - font-weight: 400
          - width: max-content
          - margin-left: 2%
          - margin-top: '-4%'
        status:
          - position: absolute
          - justify-self: end
          - align-self: end
          - justify-content: right
          - top: 0vh
          - right: 0vw
          - z-index: 1
    custom_fields:
      title: '[[[ return variables.var_title ]]]'
      status:
        card:
          type: custom:layout-card
          layout_type: custom:horizontal-layout
          cards:
            - type: custom:layout-card
              layout_type: grid-layout
              layout:
                margin: 0
                card_margin: 0
                place-content: end
                grid-template-columns: |
                  [[[
                    return `repeat(auto-fit, minmax(max(${variables.var_assistsat_entity_status_icons_size}, ${variables.var_assistsat_entity_status_icons_size}), ${variables.var_assistsat_entity_status_icons_size}))`
                  ]]]                
              cards: |-
                [[[{
                  const buttonList = [];
                  let list;

                  try {
                    list = hass.states[variables.var_assistsat_entity].attributes.status_icons;
                  } catch (error) {
                    list = ""; // Set list to an empty string if an error occurs
                  }

                  if (list) {
                    for (let i = 0; i < list.length; i++) {
                      buttonList.push({
                        type: "custom:button-card",
                        template: list[i]
                      });
                    }
                  }

                  return buttonList.reverse();
                }]]]
type: custom:button-card
variables:
  alarmcardversion: 1.1.0
  var_display_timer_name: |-
    [[[
      var assistbid = localStorage.getItem("view_assist_sensor");
      var alarm_name = hass.states[assistbid].attributes.display_timer_name;
      try {return `${alarm_name}`;} catch { return "" }
    ]]]
  var_display_timer_expire: |-
    [[[
      var assistbid = localStorage.getItem("view_assist_sensor");
      var alarm_name = hass.states[assistbid].attributes.display_timer_expire;
      try {return `${alarm_name}`;} catch { return "" }
    ]]]
  var_display_timer_type: |-
    [[[
      var assistbid = localStorage.getItem("view_assist_sensor");
      var alarm_name = hass.states[assistbid].attributes.display_timer_type;
      try {return `${alarm_name}`;} catch { return "" }
    ]]]
  var_time: |-
    [[[ 
      if (variables.var_display_timer_type === 'timer') {
        return `<viewassist-countdown expires='${variables.var_display_timer_expire}'></viewassist-countdown>`;
      } else {
        return `<viewassist-clock server_time=true></viewassist-clock>`;
      }
    ]]]
template:
  - variable_template
  - responsive_base
  - body_template
triggers_update: all
styles:
  grid:
    - grid-template-areas: |-
        [[[
          if (window.viewAssistResponsive.orientation === "portrait") {
            return `"title status"
                    "display_timer_name display_timer_name"
                    "time time"
                    "snooze dismiss"
                    "assist assist"`;
          } else {
            return `"title status"
                    "display_timer_name display_timer_name"
                    "time time"
                    "snooze dismiss"
                    "assist assist"`;
          }
        ]]]
    - grid-template-rows: |-
        [[[
          if (window.viewAssistResponsive.orientation === "portrait") {
            return window.viewAssistResponsive.is_small_screen ? 
              ".5fr min-content min-content min-content min-content" : 
              ".5fr min-content min-content min-content min-content";
          } else {
            return ".5fr min-content min-content min-content min-content";
          }
        ]]]
    - grid-template-columns: 1fr 1fr
  card:
    - background-size: cover
    - background-color: "#24292c"
  custom_fields:
    display_timer_name:
      - justify-self: center
      - z-index: 1
      - font-size: |-
          [[[
            if (window.viewAssistResponsive.orientation === "portrait") {
              return window.viewAssistResponsive.is_small_screen ? "6vh" : "8vh";
            } else {
              return "10vh";
            }
          ]]]
      - position: grid
      - color: white
      - align-content: end
    time:
      - justify-self: center
      - z-index: 1
      - font-size: |-
          [[[
            if (window.viewAssistResponsive.orientation === "portrait") {
              return window.viewAssistResponsive.is_small_screen ? "20vh" : "25vh";
            } else {
              return "35vh";
            }
          ]]]
      - font-weight: bold
      - position: grid
      - color: white
    snooze:
      - justify-self: center
      - align-self: center
      - z-index: 1
      - font-size: |-
          [[[
            if (window.viewAssistResponsive.orientation === "portrait") {
              return window.viewAssistResponsive.is_small_screen ? "8vh" : "10vh";
            } else {
              return "15vh";
            }
          ]]]
      - width: max-content
      - position: grid
      - top: |-
          [[[
            if (window.viewAssistResponsive.orientation === "portrait") {
              return "80%";
            } else {
              return "70%";
            }
          ]]]
    dismiss:
      - justify-self: center
      - align-self: center
      - z-index: 1
      - font-size: |-
          [[[
            if (window.viewAssistResponsive.orientation === "portrait") {
              return window.viewAssistResponsive.is_small_screen ? "8vh" : "10vh";
            } else {
              return "15vh";
            }
          ]]]
      - width: max-content
      - position: grid
      - top: |-
          [[[
            if (window.viewAssistResponsive.orientation === "portrait") {
              return "80%";
            } else {
              return "70%";
            }
          ]]]
custom_fields:
  title: " "
  display_timer_name: "[[[ return variables.var_display_timer_name ]]]"
  time: |-
    [[[ 
      return variables.var_time; 
    ]]]
  snooze:
    card:
      type: custom:button-card
      name: Snooze
      show_icon: false
      show_name: true
      tap_action:
        action: call-service
        service: view_assist.broadcast_event
        service_data:
          event_name: viewassist
          event_data:
            command: snooze alarm
            entity_id: "[[[ return variables.var_assistsat_entity ]]]"
            mic_device: >-
              [[[ return
              hass.states[variables.var_assistsat_entity].attributes.mic_device
              ]]]
      styles:
        card:
          - display: flex
          - justify-content: center
          - align-items: center
          - width: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "25vw" : "28vw";
                } else {
                  return "30vw";
                }
              ]]]
          - height: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "8vh" : "9vh";
                } else {
                  return "10vh";
                }
              ]]]
          - border-radius: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "7vw" : "7vw";
                } else {
                  return "5vw";
                }
              ]]]
          - border: none
          - background-color: white
        name:
          - font-size: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "3vh" : "4vh";
                } else {
                  return "5vh";
                }
              ]]]
          - color: black
          - font-weight: bold
          - text-align: center
  dismiss:
    card:
      type: custom:button-card
      name: Dismiss
      show_icon: false
      show_name: true
      tap_action:
        action: call-service
        service: view_assist.broadcast_event
        service_data:
          event_name: viewassist
          event_data:
            command: dismiss alarm
            entity_id: "[[[ return variables.var_assistsat_entity ]]]"
      styles:
        card:
          - display: flex
          - justify-content: center
          - align-items: center
          - width: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "25vw" : "28vw";
                } else {
                  return "30vw";
                }
              ]]]
          - height: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "8vh" : "9vh";
                } else {
                  return "10vh";
                }
              ]]]
          - border-radius: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "4vh" : "4.5vh";
                } else {
                  return "5vh";
                }
              ]]]
          - color: white
          - border: none
          - background-color: "#2899f3"
        name:
          - font-size: |-
              [[[
                if (window.viewAssistResponsive.orientation === "portrait") {
                  return window.viewAssistResponsive.is_small_screen ? "3vh" : "4vh";
                } else {
                  return "5vh";
                }
              ]]]
          - color: white
          - font-weight: bold
          - text-align: center
  icon_template:
    template: variable_template
    aspect_ratio: 1/1
    color_type: card
    show_name: false
    size: 90%
    padding: 0px
    styles:
      card:
        - background-color: transparent
        - border-width: 0px
      icon:
        - display: grid
        - color: white
  mediaplayer:
    type: custom:button-card
    template: icon_template
    icon: mdi:volume-off
    tap_action:
      action: call-service
      service: media_player.volume_mute
      service_data:
        entity_id: '[[[ return variables.var_mediaplayer_device ]]]'
        is_volume_muted: false
  mic:
    type: custom:button-card
    template: icon_template
    icon: mdi:microphone-off
    tap_action:
      action: call-service
      service: homeassistant.turn_off
      service_data:
        entity_id: '[[[ return variables.var_mic_switch ]]]'
  hold:
    type: custom:button-card
    template: icon_template
    icon: mdi:hand-back-left
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        mode: normal
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  cycle:
    type: custom:button-card
    template: icon_template
    icon: mdi:sync
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        mode: normal
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  dnd:
    type: custom:button-card
    template: icon_template
    icon: mdi:minus-circle
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        do_not_disturb: false
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  weather:
    type: custom:button-card
    template: icon_template
    icon: mdi:weather-sunny
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/weather
  home:
    type: custom:button-card
    template: icon_template
    icon: mdi:home
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/clock
views:
  - title: Home
